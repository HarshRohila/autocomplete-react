{"version":3,"sources":["hooks/useAsync.ts","config/environment.ts","services/movies.ts","components/Movie.tsx","components/SearchResult.tsx","App.tsx","utils/debounce.ts","reportWebVitals.ts","index.tsx"],"names":["useAsync","asyncFunction","immediate","useState","status","setStatus","value","setValue","error","setError","execute","useCallback","then","response","catch","useEffect","apikey","development","API_KEY","test","production","moviesService","searchByTitle","title","fetch","res","json","Search","getById","id","MovieCard","movie","getMovieById","imdbID","movieDetails","className","src","Poster","alt","style","width","Title","Ratings","Value","SearchResult","onClickMovie","movies","tabIndex","slice","map","onClick","App","query","setQuery","isSearchFocussed","setIsSearchFocussed","undefined","selectedMovie","setSelectedMovie","getMoviesByQuery","useMemo","func","timer","timeout","args","clearTimeout","setTimeout","apply","debounce","length","type","data-testid","placeholder","onChange","e","target","onFocus","onBlur","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.87adbedd.chunk.js","sourcesContent":["import { useState, useCallback, useEffect } from 'react'\n\nconst useAsync = <T, E = string>(\n  asyncFunction: (...args: any[]) => Promise<T>,\n  immediate = true,\n) => {\n  const [status, setStatus] = useState<'idle' | 'pending' | 'success' | 'error'>('idle')\n  const [value, setValue] = useState<T | null>(null)\n  const [error, setError] = useState<E | null>(null)\n\n  // The execute function wraps asyncFunction and\n  // handles setting state for pending, value, and error.\n  // useCallback ensures the below useEffect is not called\n  // on every render, but only if asyncFunction changes.\n  const execute = useCallback(\n    (...args) => {\n      setStatus('pending')\n      setValue(null)\n      setError(null)\n\n      return asyncFunction(...args)\n        .then((response: any) => {\n          setValue(response)\n          setStatus('success')\n        })\n        .catch((error: any) => {\n          setError(error)\n          setStatus('error')\n        })\n    },\n    [asyncFunction],\n  )\n\n  // Call execute if we want to fire it right away.\n  // Otherwise execute can be called later, such as\n  // in an onClick handler.\n  useEffect(() => {\n    if (immediate) {\n      execute()\n    }\n  }, [execute, immediate])\n\n  return { execute, status, value, error }\n}\n\nexport default useAsync\n","const environment = {\n  development: {\n    API_KEY: '65199301',\n  },\n  test: {\n    API_KEY: '65199301',\n  },\n  production: {\n    API_KEY: '695c6d8d',\n  },\n}\n\nexport default environment\n","import { Movie } from '../components/Movie'\nimport environment from '../config/environment'\n\nconst apikey = environment[process.env.NODE_ENV].API_KEY\n\nconst moviesService = {\n  searchByTitle(title: string): Promise<Movie[]> {\n    return fetch(`https://www.omdbapi.com/?s=${title}&apikey=${apikey}&type=movie`)\n      .then((res) => res.json())\n      .then((res) => res.Search)\n  },\n  getById(id: string): Promise<MovieDetails> {\n    return fetch(`https://www.omdbapi.com/?i=${id}&apikey=${apikey}`).then((res) => res.json())\n  },\n}\n\nexport interface MovieDetails extends Movie {\n  Ratings: { Source: string; Value: string }[]\n}\n\nexport default moviesService\n","import React, { useCallback } from 'react'\nimport useAsync from '../hooks/useAsync'\nimport moviesService, { MovieDetails } from '../services/movies'\n\ntype MovieProps = {\n  movie: Movie\n}\n\nexport const MovieCard = ({ movie }: MovieProps) => {\n  const getMovieById = useCallback(() => moviesService.getById(movie.imdbID), [movie])\n\n  const { value: movieDetails, status } = useAsync<MovieDetails>(getMovieById)\n\n  return (\n    <div className=\"card\">\n      <img src={movie.Poster} alt=\"Avatar\" style={{ width: 100 }} />\n      <div className=\"container\">\n        <h4>\n          <b>{movie.Title}</b>\n        </h4>\n        {status === 'pending' && <p>Loading...</p>}\n        {status === 'success' && <p>{movieDetails?.Ratings?.[0]?.Value}</p>}\n      </div>\n    </div>\n  )\n}\n\nexport interface Movie {\n  Title: string\n  imdbID: string\n  Poster: string\n  Year: string\n}\n","import React from 'react'\nimport { Movie } from './Movie'\n\ntype SearchResultProps = {\n  status: 'pending' | 'success' | 'idle' | 'error'\n  onClickMovie: (movie: Movie) => void\n  movies: Movie[] | null\n}\n\nexport const SearchResult = ({ onClickMovie, movies, status }: SearchResultProps) => {\n  return (\n    <>\n      {status === 'pending' && <h1>Loading...</h1>}\n      {status === 'success' && (\n        <>\n          {movies && (\n            <ul className=\"search-results\" tabIndex={-1}>\n              {movies.slice(0, 5).map((movie) => (\n                <li onClick={() => onClickMovie(movie)} key={movie.imdbID}>\n                  {movie.Title}\n                </li>\n              ))}\n            </ul>\n          )}\n          {!movies && <h1>Not Found!</h1>}\n        </>\n      )}\n    </>\n  )\n}\n","import React, { useEffect, useMemo, useState } from 'react'\nimport './App.css'\nimport useAsync from './hooks/useAsync'\nimport { debounce } from './utils/debounce'\nimport moviesService from './services/movies'\nimport { Movie, MovieCard } from './components/Movie'\nimport { SearchResult } from './components/SearchResult'\n\nconst MIN_QUERY_LENGTH = 3\n\nfunction App() {\n  const [query, setQuery] = useState('')\n  const [isSearchFocussed, setIsSearchFocussed] = useState(false)\n\n  const [selectedMovie, setSelectedMovie] = useState<Movie | undefined>(undefined)\n\n  let { execute, value, status } = useAsync<Movie[]>(moviesService.searchByTitle, false)\n\n  const getMoviesByQuery = useMemo(() => debounce(execute, 300), [execute])\n\n  useEffect(() => {\n    if (query.length >= MIN_QUERY_LENGTH) {\n      getMoviesByQuery(query)\n    }\n  }, [query, getMoviesByQuery])\n\n  const handleClickOnMovie = (movie: Movie) => {\n    setSelectedMovie(movie)\n    setQuery(movie.Title)\n  }\n\n  return (\n    <div className=\"App\">\n      <h1>Search for Movies</h1>\n      <div className=\"search-container\">\n        <input\n          type=\"search\"\n          data-testid=\"search-input\"\n          value={query}\n          placeholder=\"Movie TItle\"\n          onChange={(e) => setQuery(e.target.value)}\n          onFocus={() => setIsSearchFocussed(true)}\n          onBlur={() => setTimeout(() => setIsSearchFocussed(false), 100)}\n        ></input>\n        {isSearchFocussed && query.length >= MIN_QUERY_LENGTH && (\n          <SearchResult onClickMovie={handleClickOnMovie} movies={value} status={status} />\n        )}\n      </div>\n      {selectedMovie && (\n        <div className=\"movie-container\">\n          <MovieCard movie={selectedMovie} />\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default App\n","export function debounce(func: any, timeout = 300) {\n  let timer: NodeJS.Timeout\n  return (...args: any) => {\n    clearTimeout(timer)\n    timer = setTimeout(() => {\n      // @ts-ignore\n      func.apply(this, args)\n    }, timeout)\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}